name: "Run GAP test suite"
description: "Runs the testintall.g or the teststandard.g script to test the GAP installation"
inputs:
  complete:
    description: "Use the more complete (but slower) teststandard.g instead of testinstall.g"
    required: false
    default: false
  mode:
    description: 'Value that determines which packages are loaded before the package is tested. The possible values are ''default'', ''onlyneeded'' or ''loadall''. The option ''default'' loads GAP with default set of package; ''onlyneeded'' loads only the needed dependencies of the package being tested; ''loadall'' executes LoadAllPackages() before the package being tested.'
    required: false
    default: 'default'
  warnings-as-errors:
    description: 'Boolean that determines whether any warnings produced whilst loading the package will be treated as errors'
    required: false
    default: 'true'
  pre-gap:
    description: 'Prefix for the ''GAP'' shell variable used by this action to launch GAP (e.g. setting this to ''valgrind --trace-children=yes --leak-check=full'' will run GAP through valgrind)'
    required: false
    default: ''

runs:
  using: "composite"
  steps:

    - name: "Validate input"
      shell: bash
      run: |
        validate_boolean() {
          local input=$1
          local option_name=$2
          if ! [[ "$input" =~ ^(true|false)$ ]]; then
            echo "Invalid value for option $option_name. Expected 'true' or 'false', but found '$input'"
            exit 1;
           fi
        }

        validate_mode () {
         if ! [[ "${{ inputs.mode }}" =~ ^(default|onlyneeded|loadall)$ ]]; then
           echo "Invalid value for option mode. Expected 'default', 'onlyneeded' or 'loadall' but found '${{ inputs.mode }}'"
           exit 1;
         fi
        }

        validate_mode
        validate_boolean "${{ inputs.warnings-as-errors }}" warnings-as-errors
  
    - name: "Run GAP test suite"
      shell: bash
      run: |
        set -ex

        GAPROOT=${GAPROOT-$HOME/gap}

        # set up a custom GAP root containing only this package, so that
        # we can force GAP to load the correct version of this package
        # (we already did that in build_pkg.sh, but we do it again here,
        # to allow the occasional instance where a package wants to also
        # run the tests of others packages, by invoking this script multiple
        # times in different directories)
        mkdir -p /tmp/gaproot/pkg/
        ln -f -s $PWD /tmp/gaproot/pkg/

        # start GAP with custom GAP root, to ensure correct package version is loaded
        GAP="$GAPROOT/gap -l /tmp/gaproot; --quitonbreak"

        # Prepend pre-gap prefix, if it exists
        if [[ ! -z "${{ inputs.pre-gap }}" ]]; then
            GAP="${{ inputs.pre-gap }} $GAP"
        fi

        if [ "${{ inputs.mode }}" = "onlyneeded" ]; then
          GAP="$GAP -A"
        fi
        
        $GAP <<GAPInput
        
        # Decide which test file should be used
        if ${{ inputs.complete }} then
            testFile := "teststandard.g";
        else
            testFile := "testinstall.g";
        fi;
        
        GAP_TESTFILE := Filename( DirectoriesLibrary( "tst" ), testFile );
        
        Read( "PackageInfo.g" );
        info := GAPInfo.PackageInfoCurrent;
        
        # Load the package with debug info
        SetInfoLevel( InfoPackageLoading, PACKAGE_DEBUG );
        SetPackagePath(info.PackageName, "/tmp/gaproot/pkg/$(basename $PWD)");

        # Capture the output of loading
        output := "";
        output_stream := OutputTextString(output, true);
        SetPrintFormattingStatus(output_stream, false);
        OutputLogTo(output_stream);
         
        # Load the package with debug info
        if "${{ inputs.mode }}" = "onlyneeded" then
           LoadPackage(info.PackageName : OnlyNeeded);
        elif "&{{ inputs.mode }}" = "loadall" then
           LoadPackage(info.PackageName);
           LoadAllPackages();
        else
           LoadPackage(info.PackageName);
        fi;

        OutputLogTo();
        CloseStream(output_stream);

        # Treat warnings as errors if specified
        if ${{ inputs.warnings-as-errors }} then
           if PositionSublist(output, "warning") <> fail then
               Error("Warnings were found when loading the package");
           fi;
        fi;

        SetInfoLevel(InfoPackageLoading, PACKAGE_ERROR);
        Print("Now running tests from ", GAP_TESTFILE, "\n");
        
        Read( GAP_TESTFILE );
        GAPInput
